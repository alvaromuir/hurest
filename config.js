// Generated by CoffeeScript 1.6.3
(function() {
  var appSchemas, appServer, mongoose, _;

  mongoose = require('mongoose');

  appServer = require('./server');

  appSchemas = require('./schema');

  _ = require('lodash');

  module.exports = {
    init: function(setupObj) {
      var connLength, models;
      if (_.keys(mongoose.models).length === 0) {
        models = {};
        _.forIn(appSchemas, function(val, key) {
          var hooks, model, validators, virtuals;
          model = new mongoose.Schema(appSchemas[key].model, {
            toObject: {
              virtuals: true
            },
            toJSON: {
              virtuals: true,
              getters: true
            }
          });
          model.methods = _.cloneDeep(appSchemas[key].methods);
          hooks = appSchemas[key].hooks;
          _.forIn(hooks, function(v, k) {
            var hook, hookObj;
            hook = k;
            hookObj = hooks[k];
            return _.forIn(hookObj, function(v, k) {
              var action, method;
              action = k;
              method = hookObj[k];
              return model[hook](action, method);
            });
          });
          virtuals = appSchemas[key].virtuals;
          _.forIn(virtuals, function(v, k) {
            return model.virtual(k).get(v);
          });
          models[key] = mongoose.model(key, model);
          validators = appSchemas[key].validators;
          return _.forIn(validators, function(v, k) {
            return models[key].schema.path(k).validate(v.fn, v.nsg);
          });
        });
      }
      connLength = mongoose.connections.length;
      mongoose.connect(setupObj.uri, setupObj.name);
      return console.log('Connection #' + connLength + ' to mongodb://' + setupObj.uri + '/' + setupObj.name);
    },
    models: function() {
      return mongoose.models;
    }
  };

}).call(this);
