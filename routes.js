// Generated by CoffeeScript 1.6.3
(function() {
  var db, genLocals, paramsObjectify, render, renderPage, schemas, sockets, _, _str;

  db = require('./config');

  schemas = require('./schema');

  render = require('./render');

  sockets = require('./sockets');

  _ = require('lodash');

  _str = require('underscore.string');

  _.mixin(_str.exports());

  _.mixin(require('underscore.inflections'));

  paramsObjectify = function(params, col) {
    var collection, e, pairs, rslt, x;
    collection = _.rstrip(col, 's');
    if (params[collection]) {
      return params[collection];
    }
    try {
      return JSON.parse(params);
    } catch (_error) {
      e = _error;
      rslt = {};
      if (typeof params !== "object") {
        params = params.split("&");
      }
      for (x in params) {
        pairs = params[x].split("=");
        rslt[pairs[0]] = decodeURIComponent(pairs[1].replace(/\+/g, " "));
      }
      return rslt;
    }
  };

  genLocals = function(input) {
    var doc, locals, x;
    doc = void 0;
    locals = {};
    if (arguments.length > 1) {
      doc = arguments[0];
      x = 1;
      while (x < arguments.length) {
        locals[_.keys(arguments[x])[0]] = arguments[x][_.keys(arguments[x])[0]];
        x++;
      }
    } else {
      doc = input;
    }
    locals.title = "'" + doc.title + "' details";
    locals.header = "'" + doc.title + "'";
    locals.blurb = 'Created on ' + doc.created;
    locals.results = _.pick(doc, function(key, val) {
      if (typeof key === 'string') {
        return key;
      }
    });
    return locals;
  };

  renderPage = function(view, prettyOpt, localVars, response, cb) {
    return render('./views/index.jade', {
      pretty: prettyOpt
    }, localVars, function(rendered) {
      response.write(rendered);
      response.end();
      return cb();
    });
  };

  module.exports = function(server, models) {
    server.opts(/\.*/, function(req, res, next) {
      res.send(200);
      return next();
    });
    server.get("/echo/:q", function(req, res, next) {
      res.send(200, 'You requested ' + req.url + ' on ' + req.date());
      return next();
    });
    server.get("/", function(req, res, next) {
      res.send(200, {
        move_along: 'nothing to see here... ',
        follow_me: '@alvaromuir'
      });
      return next();
    });
    server.get("/input/:col", function(req, res, next) {
      var Model, collection, locals, rules, schema;
      collection = _str.capitalize(req.params.col);
      locals = {
        title: "Model request error",
        header: "Opps, a schema for '" + req.params.col + "' does not exist",
        blurb: "Check your url entry. If it's correct, you should create the model."
      };
      if (schemas[collection]) {
        Model = db.models()[collection];
        models = _.keys(db.models());
        rules = schemas[collection].webform;
        schema = _.pick(db.models()[collection].schema.tree, function(value, key) {
          return key.charAt(0) !== '_';
        });
        _(schema).each(function(val, key) {
          return schema[key] = 'input';
        });
        _(rules).each(function(label, inputType) {
          return _(label).each(function(val, i) {
            if (typeof val === 'string') {
              schema[label[i]] = inputType;
            }
            if (typeof val === 'object') {
              return _(val).each(function(attrs, complexLabel) {
                schema[complexLabel] = {};
                schema[complexLabel][inputType] = {};
                return _(attrs).each(function(val, key) {
                  return schema[complexLabel][inputType][key] = val;
                });
              });
            }
          });
        });
        locals = {
          title: "Create a new " + _.singularize(collection),
          header: "New " + _.singularize(collection),
          blurb: "Go 'head and create a new " + _.singularize(collection).toLowerCase() + ". Go Nuts.",
          schema: schema,
          rules: rules
        };
        return renderPage('./views/index.jade', true, locals, res, next);
      } else {
        return renderPage('./views/index.jade', true, locals, res, next);
      }
    });
    server.get("/input/:col/:id", function(req, res, next) {
      var Model, collection, errorLocals, io, locals, rules, schema;
      if (io === void 0) {
        io = require('./server').io;
      }
      collection = _str.capitalize(req.params.col);
      errorLocals = {
        title: "Model request error",
        header: "Whoops, a record with id '" + req.params.id + "' does not exist",
        blurb: "Check your url entry. If it's correct, you should create the record."
      };
      if (schemas[collection]) {
        Model = db.models()[collection];
        models = _.keys(db.models());
        rules = schemas[collection].webform;
        schema = _.pick(db.models()[collection].schema.tree, function(value, key) {
          return key.charAt(0) !== '_';
        });
        io.sockets.on('connection', function(socket) {
          return socket.emit('getRules', rules);
        });
        if (schemas[collection].model._id === false) {
          return Model.findOne({
            id: req.params.id
          }, function(err, doc) {
            var locals;
            if (err || doc === null) {
              locals = errorLocals;
            } else {
              locals = genLocals(doc, {
                schema: schema
              });
            }
            renderPage('./views/index.jade', true, locals, res, next);
          });
        } else {
          return Model.findById(req.params.id, function(err, doc) {
            var locals;
            if (err || doc === null) {
              return locals = errorLocals;
            } else {
              locals = genLocals(doc, {
                schema: schema
              });
              renderPage('./views/index.jade', true, locals, res, next);
            }
          });
        }
      } else {
        locals = {
          title: "Model request error",
          header: "Opps, a schema for '" + req.params.col + "' does not exist",
          blurb: "Check your url entry. If it's correct, you should create the model."
        };
        return renderPage('./views/index.jade', true, locals, res, next);
      }
    });
    server.get("/kill/:col/:id", function(req, res, next) {
      var Model, collection, successMessage;
      collection = _str.capitalize(req.params.col);
      Model = db.models()[collection];
      successMessage = function(rslt) {
        var msg;
        msg = {
          status: 'OK',
          info: "record " + rslt._id + " destroyed"
        };
        return msg;
      };
      if (schemas[collection].model._id === false) {
        return Model.findOneAndRemove({
          id: req.params.id
        }, function(err, rslt) {
          if (err) {
            return res.send(200, {
              error: err
            });
          } else {
            return res.send(200, successMessage(rslt));
          }
        });
      } else {
        return Model.findByIdAndRemove(req.params.id, function(err, rslt) {
          if (err) {
            return res.send(200, {
              error: err
            });
          } else {
            return res.send(200, successMessage(rslt));
          }
        });
      }
    });
    server.post("/api/:col", function(req, res, next) {
      var Model, collection, data;
      collection = _str.capitalize(req.params.col);
      Model = db.models()[collection];
      if (Model) {
        data = paramsObjectify(req.body);
        data.created = Date.now();
        return Model.create(data, function(err, rslt) {
          if (err) {
            res.send(200, {
              error: err
            });
          } else {
            res.send(201, rslt);
          }
          return next();
        });
      } else {
        return res.send(200, {
          error: 'Schema for ' + req.params.col + ' does not exist.'
        });
      }
    });
    server.get("/api/:col", function(req, res, next) {
      var Model, collection, hideList;
      collection = _str.capitalize(req.params.col);
      if (schemas[collection]) {
        hideList = schemas[collection].jsonOmit;
        Model = db.models()[collection];
        return Model.find({}, function(err, rcrds) {
          var rslts, rsltsArr;
          if (err) {
            return res.send(200, {
              error: err
            });
          } else {
            rslts = {};
            rsltsArr = [];
            _.each(rcrds, function(doc) {
              var rcrd, tmp;
              tmp = _.omit(doc.toJSON(), hideList);
              rcrd = {};
              _.each(tmp, function(v, k) {
                return rcrd[_str.underscored(k)] = v;
              });
              return rsltsArr.push(rcrd);
            });
            rslts[req.params.col] = rsltsArr;
            return res.send(200, rslts);
          }
        });
      } else {
        return res.send(405, {
          error: 405,
          msg: "'" + collection + "' was not found. Please check your url or create the collection."
        });
      }
    });
    server.get("/api/:col/:id", function(req, res, next) {
      var Model, collection, hideList;
      collection = _str.capitalize(req.params.col);
      if (schemas[collection]) {
        hideList = schemas[collection].jsonOmit;
        Model = db.models()[collection];
        if (schemas[collection].model._id === false) {
          return Model.findOne({
            id: req.params.id
          }, function(err, doc) {
            var rslts;
            if (err) {
              return res.send(200, {
                error: err
              });
            } else {
              if (doc) {
                rslts = {};
                rslts[_.rstrip(req.params.col, 's')] = _.omit(doc.toJSON(), hideList);
                return res.send(200, rslts);
              } else {
                return res.send(405, {
                  error: 405,
                  msg: "'" + collection + ":" + req.params.id + "' is invalid."
                });
              }
            }
          });
        } else {
          return Model.findById(req.params.id, function(err, doc) {
            var rslts;
            if (err) {
              return res.send(405, {
                error: 405,
                message: "'" + collection + ":" + req.params.id + "' is invalid."
              });
            } else {
              if (doc) {
                rslts = {};
                rslts[_.rstrip(req.params.col, 's')] = _.omit(doc.toJSON(), hideList);
                return res.send(200, rslts);
              } else {
                return res.send(405, {
                  error: 405,
                  msg: "'" + collection + ":" + req.params.id + "' is invalid."
                });
              }
            }
          });
        }
      } else {
        return res.send(405, {
          error: 405,
          msg: "'" + collection + "' was not found. Please check your url or create the collection."
        });
      }
    });
    server.put("/api/:col/:id", function(req, res, next) {
      var Model, collection, data, schema;
      collection = _str.capitalize(req.params.col);
      Model = db.models()[collection];
      data = paramsObjectify(req.body, req.params.col);
      data.updated = Date.now();
      schema = _.pick(db.models()[collection].schema.tree, function(value, key) {
        return key.charAt(0) !== '_';
      });
      if (schemas[collection].model._id === false) {
        return Model.findOneAndUpdate({
          id: req.params.id
        }, data, null, function(err, rslt) {
          if (err) {
            return res.send(200, {
              error: err
            });
          } else {
            return res.send(204, rslt);
          }
        });
      } else {
        return Model.findByIdAndUpdate(req.params.id, data, null, function(err, rslt) {
          if (err) {
            return res.send(200, {
              error: err
            });
          } else {
            return res.send(204, rslt);
          }
        });
      }
    });
    return server.del("/api/:col/:id", function(req, res, next) {
      var Model, collection;
      collection = _str.capitalize(req.params.col);
      Model = db.models()[collection];
      return Model.findByIdAndRemove(req.params.id, function(err, rslt) {
        if (err) {
          return res.send(200, {
            error: err
          });
        } else {
          return res.send(204, {
            status: 'OK',
            info: "record " + rslt._id + " destroyed"
          });
        }
      });
    });
  };

}).call(this);
